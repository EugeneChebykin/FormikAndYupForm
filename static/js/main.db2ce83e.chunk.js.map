{"version":3,"sources":["components/FormLayout.jsx","components/FormikForm.jsx","App.jsx","serviceWorker.js","index.js"],"names":["FormLayout","props","values","errors","touched","isSubmitting","handleChange","handleBlur","handleSubmit","labelCol","xs","span","sm","wrapperCol","onSubmit","Item","label","validateStatus","name","help","type","id","prefix","placeholder","value","onChange","onBlur","email","age","password","confirmation","website","acceptTerms","checked","skills","render","remove","push","rows","map","index","key","length","shape","icon","onClick","uniqueId","style","display","justifyContent","htmlType","disabled","success","message","validationSchema","Yup","min","max","required","matches","oneOf","url","of","FormikForm","initialValues","setSubmitting","resetForm","setFieldError","setFieldValue","axios","post","user","then","res","data","catch","err","finally","object","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db2ce83e.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { uniqueId } from 'lodash';\r\nimport { Form, Input, Icon, Checkbox, Button, Row, Col, Alert } from 'antd';\r\nimport { FieldArray } from 'formik';\r\n\r\nconst FormLayout = props => {\r\n  const { values, errors, touched, isSubmitting, handleChange, handleBlur, handleSubmit } = props;\r\n\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 5 },\r\n    },\r\n    wrapperCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 12 },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Form {...formItemLayout} onSubmit={handleSubmit}>\r\n      <Form.Item\r\n        label=\"Name\"\r\n        validateStatus={touched.name && errors.name ? 'error' : null}\r\n        help={touched.name && errors.name ? errors.name : null}\r\n      >\r\n        <Input\r\n          type=\"text\"\r\n          id=\"name\"\r\n          prefix={<Icon type=\"user\" />}\r\n          placeholder=\"Enter a name\"\r\n          value={values.name}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item\r\n        label=\"Email\"\r\n        validateStatus={touched.email && errors.email ? 'error' : null}\r\n        help={touched.email && errors.email ? errors.email : null}\r\n      >\r\n        <Input\r\n          type=\"email\"\r\n          id=\"email\"\r\n          prefix={<Icon type=\"mail\" />}\r\n          placeholder=\"Enter an email\"\r\n          value={values.email}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item\r\n        label=\"Age\"\r\n        validateStatus={touched.age && errors.age ? 'error' : null}\r\n        help={touched.age && errors.age ? errors.age : null}\r\n      >\r\n        <Input\r\n          type=\"number\"\r\n          id=\"age\"\r\n          prefix={<Icon type=\"user\" />}\r\n          placeholder=\"Enter an age\"\r\n          value={values.age}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item\r\n        label=\"Password\"\r\n        validateStatus={touched.password && errors.password ? 'error' : null}\r\n        help={touched.password && errors.password ? errors.password : null}\r\n      >\r\n        <Input\r\n          type=\"password\"\r\n          id=\"password\"\r\n          prefix={<Icon type=\"lock\" />}\r\n          placeholder=\"Enter a password\"\r\n          value={values.password}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item\r\n        label=\"Password confirmation\"\r\n        validateStatus={touched.confirmation && errors.confirmation ? 'error' : null}\r\n        help={touched.confirmation && errors.confirmation ? errors.confirmation : null}\r\n      >\r\n        <Input\r\n          type=\"password\"\r\n          id=\"confirmation\"\r\n          prefix={<Icon type=\"lock\" />}\r\n          placeholder=\"Confirm a password\"\r\n          value={values.confirmation}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item\r\n        label=\"Website\"\r\n        validateStatus={touched.website && errors.website ? 'error' : null}\r\n        help={touched.website && errors.website ? errors.website : null}\r\n      >\r\n        <Input\r\n          type=\"url\"\r\n          id=\"website\"\r\n          prefix={<Icon type=\"global\" />}\r\n          placeholder=\"Enter a website\"\r\n          value={values.website}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item\r\n        label=\"Accept terms\"\r\n        validateStatus={touched.acceptTerms && errors.acceptTerms ? 'error' : null}\r\n        help={touched.acceptTerms && errors.acceptTerms ? errors.acceptTerms : null}\r\n      >\r\n        <Checkbox id=\"acceptTerms\" checked={values.acceptTerms} onChange={handleChange} />\r\n      </Form.Item>\r\n      <Form.Item\r\n        label=\"Skills\"\r\n        validateStatus={touched.skills && errors.skills ? 'error' : null}\r\n        help={touched.skills && errors.skills ? errors.skills : null}\r\n      >\r\n        <FieldArray\r\n          name=\"skills\"\r\n          render={({ remove, push }) => {\r\n            const rows = values.skills.map(({ id, name }, index) => (\r\n              <Row key={id}>\r\n                <Col span={12}>\r\n                  <Input name={`skills[${index}].name`} value={name} onChange={handleChange} />\r\n                </Col>\r\n                <Col span={2}>\r\n                  {values.skills.length >= 2 && (\r\n                    <Button\r\n                      type=\"danger\"\r\n                      shape=\"circle\"\r\n                      icon=\"close\"\r\n                      onClick={() => remove(index)}\r\n                    />\r\n                  )}\r\n                </Col>\r\n              </Row>\r\n            ));\r\n            return (\r\n              <div>\r\n                {rows}\r\n                <Button type=\"primary\" onClick={() => push({ id: uniqueId(), name: '' })}>\r\n                  Add Skill\r\n                </Button>\r\n              </div>\r\n            );\r\n          }}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item style={{ display: 'flex', justifyContent: 'center' }}>\r\n        <Button type=\"primary\" htmlType=\"submit\" disabled={isSubmitting}>\r\n          Submit\r\n        </Button>\r\n      </Form.Item>\r\n      {(values.success || errors.success) && (\r\n        <Alert\r\n          type={errors.success ? 'error' : 'success'}\r\n          message={errors.success ? errors.success : values.success}\r\n        />\r\n      )}\r\n    </Form>\r\n  );\r\n};\r\n\r\nFormLayout.propTypes = {\r\n  values: PropTypes.instanceOf(Object).isRequired,\r\n  touched: PropTypes.instanceOf(Object).isRequired,\r\n  errors: PropTypes.instanceOf(Object).isRequired,\r\n  isSubmitting: PropTypes.bool.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n  handleBlur: PropTypes.func.isRequired,\r\n  handleSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FormLayout;\r\n","import React from 'react';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\nimport { uniqueId } from 'lodash';\r\nimport FormLayout from './FormLayout';\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .min(1, 'Must have a character')\r\n    .max(50, 'Must be shorter than 50')\r\n    .required('Must enter a name'),\r\n  email: Yup.string()\r\n    .email('Must be a valid email address')\r\n    .required('Email is required'),\r\n  age: Yup.number('Must be an integer')\r\n    .min(18, 'Must be in range of 18 and 65')\r\n    .max(65, 'Must be in range of 18 and 65')\r\n    .required(),\r\n  password: Yup.string()\r\n    .min(8, 'Must be longer than 8')\r\n    .max(40, 'Must be shorter than 40')\r\n    .matches(/[0-9]/, 'Must have at least one digit')\r\n    .matches(/[A-Z]/, 'Must have at least one uppercase character')\r\n    .matches(/^[a-zA-Z0-9]{8,}$/, 'Must have only letters and digits')\r\n    .required('Password is required'),\r\n  confirmation: Yup.string()\r\n    .oneOf([Yup.ref('password'), null], 'Must be the same password')\r\n    .required('Confirmation is required'),\r\n  website: Yup.string().url('Mustbe a valid url'),\r\n  acceptTerms: Yup.bool().oneOf([true], 'Field must be checked'),\r\n  skills: Yup.array()\r\n    .of(Yup.string())\r\n    .min(1, 'Must have at least one skill')\r\n    .required(),\r\n});\r\n\r\nconst FormikForm = () => {\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: '',\r\n        email: '',\r\n        age: 0,\r\n        password: '',\r\n        confirmation: '',\r\n        website: '',\r\n        acceptTerms: false,\r\n        skills: [{ id: uniqueId(), name: '' }],\r\n      }}\r\n      validationSchema={validationSchema}\r\n      onSubmit={(values, { setSubmitting, resetForm, setFieldError, setFieldValue }) => {\r\n        setSubmitting(true);\r\n        axios\r\n          .post('http://localhost:8000/login', { user: { ...values } })\r\n          .then(res => setFieldValue('success', res.data), resetForm())\r\n          .catch(err => setFieldError('success', err.message))\r\n          .finally(() => setSubmitting(false));\r\n      }}\r\n    >\r\n      {object => <FormLayout {...object} />}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormikForm;\r\n","import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport FormikForm from './components/FormikForm';\n\nfunction App() {\n  return <FormikForm />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}